## Main
# main

snippet main "main"
	int main(int argc, const char *argv[])
	{
		${0}
		return 0;
	}
endsnippet

# main(void)
snippet mainn
	int main()
	{
		${0}
		return 0;
	}
endsnippet

snippet inc
#include "${1:stdio}.h"
endsnippet

snippet incc "Description" b
#include <${1:stdio}.h>
endsnippet

snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
endsnippet

# define
snippet def
#define
endsnippet

snippet ifdef
#ifdef ${1:FOO}
	${2:#define }
#endif
endsnippet

snippet #if
#if ${1:FOO}
	${0:${VISUAL}}
#endif
endsnippet

# header include guard
snippet once
#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

#define $1

${0}

#endif /* end of include guard: $1 */
endsnippet

# if
snippet if
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife
if (${1:true}) {
	${2:${VISUAL}}
} else {
	${0}
}
endsnippet
# else

snippet el
else {
	${0:${VISUAL}}
}
endsnippet
# else if
snippet elif
else if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet
# ifi
snippet ifi
if (${1:true}) ${0};
endsnippet

# switch
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

# case
snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

snippet ret
	return ${0};
endsnippet

snippet for
for (${1:int i=0}; ${2:i < len}; ${3:i++}) {
	${4}
}
endsnippet

snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# for (custom)
snippet forr
for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
	${5}
}
endsnippet
# while
snippet wh
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet
# do... while
snippet do
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet
##
## Functions
# function definition
snippet fun
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet
# function definition with zero parameters
snippet fun0
${1:void} ${2:function_name}()
{
	${3}
}
endsnippet

## Types
# typedef
snippet td
typedef ${1:int} ${2:MyCustomType};
endsnippet
# struct
snippet st
/*! \struct $1
 *  \brief ${3:Brief struct description}
 *
 *  ${4:Detailed description}
 */
struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
	${2:Data} /*!< ${4:Description} */
}${5: /* optional variable list */};
endsnippet
# typedef struct
snippet tds
/*! \struct $2
 *  \brief ${5:Brief struct description}
 *
 *  ${6:Detailed description}
 */
typedef struct ${2:_$1 }{
	m_${3:Data} /*!< ${4:Description} */
} ${1:`vim_snippets#Filename('$1_t', 'name')`};
endsnippet

snippet enum
/*! \enum $1
 *
 *  ${2:Detailed description}
 */
enum ${1:name} { ${0} };
endsnippet
# typedef enum
snippet tde
/*! \enum $2
 *
 *  ${4:Detailed description}
 */
typedef enum {
	${1:Data} /*!< ${3:Description} */
} ${2:foo};
endsnippet
##
## Input/Output
# printf
snippet pr
printf("${1:%s}\n"${2});
endsnippet
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet
snippet prd
printf("${1:} = %d\n", $1);
endsnippet
snippet prf
printf("${1:} = %f\n", $1);
endsnippet
snippet prx
printf("${1:} = %${2}\n", $1);
endsnippet

snippet todo
	/*! TODO: ${1:Todo description here}
	 *  \todo $1
	 */
endsnippet
