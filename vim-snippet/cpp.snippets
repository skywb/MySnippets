priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet main
int main() {
	${0}
}
endsnippet
##
## STL Collections

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet
# std::vector
snippet vector
std::vector<${1:T}> ${2};
endsnippet
# std::deque
snippet deque
std::deque<${1:T}> ${2};
endsnippet
# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet
# std::list
snippet list
std::list<${1:T}> ${2};
endsnippet
# std::set
snippet set
std::set<${1:T}> ${2};
endsnippet
# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::multiset
snippet mset
std::multiset<${1:T}> ${2};
endsnippet
# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet
# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet
# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::stack
snippet stack
std::stack<${1:T}> ${2};
endsnippet
# std::queue
snippet queue
std::queue<${1:T}> ${2};
endsnippet
# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet
##
## STL smart pointers
# std::shared_ptr
snippet msp
std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
endsnippet
snippet amsp
auto ${1} = std::make_shared<${2:T}>(${3});
endsnippet
# std::unique_ptr
snippet mup
std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
endsnippet
snippet amup
auto ${1} = std::make_unique<${2:T}>(${3});
endsnippet

snippet cout "standard out" b
std::cout << ${1:"hello world"} << std::endl;
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet forc "general for loop (for)"
for (${6:auto} ${1:i} = ${2:v.begin()}; `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]` ${4:!=} ${3:`!p m = re.search(r'^(?:(.*)(\.|->)begin\(\)|((?:std|boost)::)?begin\((.*)\))$', t[2]); snip.rv = (((m.group(3) if m.group(3) else "") + "end(" + m.group(4) + ")") if m.group(4) else (m.group(1) + m.group(2) + "end()")) if m else ""`}; ${5:++`!p snip.rv = t[1].split(" ")[-1]`}) {
	${VISUAL}$0
}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

## Input/Output
# std::cout
snippet cout
std::cout << ${1} << std::endl;
endsnippet
# std::cin
snippet cin
std::cin >> ${1};
endsnippet
##
## Casts
# static
snippet sca
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# dynamic
snippet dca
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# reinterpret
snippet rca
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# const
snippet cca
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
## Iteration
# for i
snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# foreach
snippet fore
for (${1:auto} ${2:i} : ${3:container}) {
	${4}
}
endsnippet
# iterator
snippet iter
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet

# auto iterator
snippet itera
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet
##
## Lambdas
# lamda (one line)
snippet ld
[${1}](${2}) {${3}};
endsnippet
# lambda (multi-line)
snippet lld
[${1}](${2}) {
	${3}
};
endsnippet
# snippets exception
snippet try
try {

}catch(${1}) {

}
endsnippet
# auto function
snippet af auto function
auto ${1:name}(${2}) -> ${3:void}
{
	${0}
};
endsnippet

## Class
snippet cl "class .. (class)"
/*! @class ${1/(\w+).*/$1/}
 *  @brief ${3:Brief class description}
 *
 *  ${4:Detailed description}
 */
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${5: type instance}; /*!< ${6:Member description} */
};
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
*  @brief: ${4:brief}
*
*  @param: `!p write_docstring_args(t[3],snip)`
*
*  @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param}) {
	${0:FunctionBody}
}
endsnippet

snippet boost_test "Boost test module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:TestCaseName})
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite "Boost test suite module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(${2:SuiteName})

BOOST_AUTO_TEST_CASE(${3:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
snippet boost_test_fixture "Boost test module with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite_fixture "Boost test suite with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)

BOOST_AUTO_TEST_CASE(${4:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
# vim:ft=snippets:
