#extends c

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet incc "Description" b
#include <${1:iostream}>
endsnippet
snippet inc "current headfile" b
#include "${1:iostream}"
endsnippet
snippet binc "boost headfile" b
#include <boost/${1:shared_ptr}.hpp>
endsnippet

snippet msp "std::shared_ptr" b
std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
endsnippet

snippet mup "std::unique_ptr" b
std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
endsnippet

snippet cout "std::cout"
std::cout << ${1} << std::endl;
endsnippet
snippet cin "std::cin"
std::cin >> ${1};
endsnippet

# cast
snippet sca "static cast"
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
snippet dca "dynamic cast"
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
snippet rca "reinterpret"
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
snippet cca "const cast"
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet


# foreach
snippet fore "foreach"
for (${1:auto} ${2:i} : ${3:container}) {
	${4}
}
endsnippet

snippet iter "iterator"
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet

snippet itera "auto iterator"
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet

# Lambdas
# lamda (one line)
snippet ld "lambda one line"
[${1}](${2}){${3}};
endsnippet

snippet lld "multy line lambda"
[${1}](${2}){
	${3}
};
endsnippet

# snippets exception
snippet try "try catch block"
try {

}catch(${1}) {

}
endsnippet

snippet af "auto function"
auto ${1:name}(${2}) -> ${3:void}
{
	${0}
};
endsnippet

snippet gtest "TEST(test_case_name, test_name)"
TEST(${1:test_case_name}, ${2:test_name})
{
	${0}
}
endsnippet

snippet gtestf "TEST_F(test_case_name, test_name)"
TEST_F(${1:test_fixture},${2:test_name})
{
	${0}
}
endsnippet

snippet main "main function" b
int main(int argc, const char *argv[])
{
	${0}
	return 0;
}
endsnippet
snippet mainn
int main()
{
	${0}
	return 0;
}
endsnippet

snippet for
for (${1:int i=0}; ${2:i < len}; ${3:++i}) {
	${4}
}
endsnippet

snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
	${4}
}
endsnippet

# for (custom)
snippet forr
for (int ${1:i} = ${2:0}; ${3:$1 < 10}; ${4:++}$1) {
	${5}
}
endsnippet

snippet wh "while"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do while"
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet


# if
snippet if
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife
if (${1:true}) {
	${2:${VISUAL}}
} else {
	${0}
}
endsnippet
# else

snippet el
else {
	${0:${VISUAL}}
}
endsnippet
# else if
snippet elif
else if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet
# ifi
snippet ifi
if (${1:true}) ${0};
endsnippet

# switch
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

# case
snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

## Functions
snippet fun "funtion"
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet

snippet todo "TODO list"
/*! TODO: ${1:Todo description here}
 *  \todo $1
 */
endsnippet
